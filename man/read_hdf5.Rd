% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_hdf5.R
\name{read_hdf5}
\alias{read_hdf5}
\title{Read Data from the Shiny App Database}
\usage{
read_hdf5(file, prefix)
}
\arguments{
\item{file}{The path of "data_shm.tar" generated by \code{write_hdf5}.}

\item{prefix}{A vector of data set identifiers such as \code{c('expr_arab', 'expr_chicken', 'df_pair')}. The vector elements must come from the "data" column in the pairing table that is made when calling \code{write_hdf5}.}
}
\value{
A list of data set and/or the pairing table.
}
\description{
This function is used to extract data from the Shiny App Database "data_shm.tar".
}
\examples{
## The examples below demonstrate 1) how to dump Expression Atlas data set into the Shiny database;
## 2) how to dump GEO data set into the Shiny database; 3) how to include aSVGs of multiple 
## development stages; 4) how to read the database; 5) how to create customized Shiny app with 
## the database. 

# 1. Dump data from Expression Atlas into "data_shm.tar" using ExpressionAtlas package (Keays 2019).

# The chicken data derived from an RNA-seq analysis on developments of 7 chicken organs under 9 
# time points (Cardoso-Moreira et al. 2019) is chosen as example.
# The following searches the Expression Atlas for expression data from ‘heart’ and ‘gallus’.
library(ExpressionAtlas)
cache.pa <- '~/.cache/shm' # The path of cache.
all.chk <- read_cache(cache.pa, 'all.chk') # Retrieve data from cache.
if (is.null(all.chk)) { # Save downloaded data to cache if it is not cached.
 all.chk <- searchAtlasExperiments(properties="heart", species="gallus")
 save_cache(dir=cache.pa, overwrite=TRUE, all.chk)
}

all.chk[3, ]
rse.chk <- read_cache(cache.pa, 'rse.chk') # Read data from cache.
if (is.null(rse.chk)) { # Save downloaded data to cache if it is not cached.
  rse.chk <- getAtlasData('E-MTAB-6769')[[1]][[1]]
  save_cache(dir=cache.pa, overwrite=TRUE, rse.chk)
}
# The downloaded data is stored in "SummarizedExperiment" by default (SE, M. Morgan et al. 2018).
# The experiment design is described in the "colData" slot. The following returns first three rows.
colData(rse.chk)[1:3, ]
# In the "colData" slot, it is required to define the "sample" and "condition" columns respectively.
# Both "sample" and "condition" are general terms. The former refers to entities where the numeric
# data are measured such as cell organelles, tissues, organs, ect. while the latter denotes 
# experimental treatments such as drug dosages, gender, trains, time series, PH values, ect. In the
# downloaded data, the two columns are not explicitly defined, so "organism_part" and "age" are 
# selected and renamed as "sample" and "condition" respectively.
colnames(colData(rse.chk))[c(6, 8)] <- c('condition', 'sample'); colnames(colData(rse.chk))
# The raw RNA-Seq count are preprocessed with the following steps: (1) normalization, 
# (2) aggregation of replicates, and (3) filtering of reliable expression data. The details of
# these steps are explained in the pacakge vignette.
\donttest{ browseVignettes('spatialHeatmap') }
se.nor.chk <- norm_data(data=rse.chk, norm.fun='ESF', log2.trans=TRUE) # Normalization
se.aggr.chk <- aggr_rep(data=se.nor.chk, sam.factor='sample', con.factor='condition', 
aggr='mean') # Replicate agggregation using mean 
# Genes are filtered out if not meet these criteria: expression values are at least 5 in at least
# 1\% of all samples, coeffient of variance is between 0.6 and 100.
se.fil.chk <- filter_data(data=se.aggr.chk, sam.factor='sample', con.factor='condition', 
pOA=c(0.01, 5), CV=c(0.6, 100), dir=NULL) 
# The aSVG file corresponding with the data is pre-packaged and copied to a temporary directory.
dir.svg <- paste0(tempdir(check=TRUE), '/svg_shm') # Temporary directory. 
if (!dir.exists(dir.svg)) dir.create(dir.svg)
# Path of the aSVG file.
svg.chk <- system.file("extdata/shinyApp/example", 'gallus_gallus.svg', package="spatialHeatmap") 
file.copy(svg.chk, dir.svg, overwrite=TRUE) # Copy the aSVG file.

# 2. Dump data from GEO into "data_shm.tar" using GEOquery package (S. Davis and Meltzer 2007).

# The Arabidopsis thaliana (Arabidopsis) data from an microarray assay of hypoxia treatment on
# Arabidopsis root and shoot cell types (Mustroph et al. 2009) is selected as example.
# The data set is downloaded with the accession number "GSE14502". It is stored in ExpressionSet
# container (W. Huber et al. 2015) by default, and then converted to a SummarizedExperiment object.
library(GEOquery)
gset <- read_cache(cache.pa, 'gset') # Retrieve data from cache.
if (is.null(gset)) { # Save downloaded data to cache if it is not cached.
  gset <- getGEO("GSE14502", GSEMatrix=TRUE, getGPL=TRUE)[[1]]
  save_cache(dir=cache.pa, overwrite=TRUE, gset)
}
se.sh <- as(gset, "SummarizedExperiment") # Converted to SummarizedExperiment
# The gene symbol identifiers are extracted from the rowData component to be used as row names.
rownames(se.sh) <- make.names(rowData(se.sh)[, 'Gene.Symbol'])
# A slice of the experimental design in colData slot is shown. Both the samples and conditions 
# are contained in the "title" column. The samples are indicated by promoters: pGL2 (root 
# atrichoblast epidermis), pCO2 (root cortex meristematic zone), pSCR (root endodermis), 
# pWOL (root vasculature), etc., and conditions are control and hypoxia.
colData(se.sh)[60:63, 1:4]
# Since the samples and conditions need to be listed in two independent columns, like the the 
# chicken data above, a targets file is recommended to separate samples and conditions. The main
# reason to choose this Arabidopdis data is to illusrate the usage of targets file when necessary.
# A pre-packaged targets file is accessed and partially shown below.
sh.tar <- system.file('extdata/shinyApp/example/target_arab.txt', package='spatialHeatmap')
target.sh <- read_fr(sh.tar); target.sh[60:63, ]
# Load custom the targets file into colData slot.
colData(se.sh) <- DataFrame(target.sh)
# This data set was already normalized with the RMA algorithm (Gautier et al. 2004). Thus, the
# pre-processing steps are restricted to aggregation of replicates and filtering of reliably
# expressed genes. 
# Replicate agggregation using mean
se.aggr.sh <- aggr_rep(data=se.sh, sam.factor='samples', con.factor='conditions', aggr='mean') 
se.fil.arab <- filter_data(data=se.aggr.sh, sam.factor='samples', con.factor='conditions', 
pOA=c(0.03, 6), CV=c(0.30, 100), dir=NULL) # Filtering of genes with low intensities and variance

# Similarly, the aSVG file corresponding to this data is pre-packaged and copied to the same
# temporary directory.
svg.arab <- system.file("extdata/shinyApp/example", 'arabidopsis.thaliana_organ_shm.svg', 
package="spatialHeatmap") 
file.copy(svg.arab, dir.svg, overwrite=TRUE)

# 3. The random data and aSVG files of two development stages of Arabidopsis organs.

# The gene expression data is randomly generated and pre-packaged. 
pa.growth <- system.file("extdata/shinyApp/example", 'random_data_multiple_aSVGs.txt',
package="spatialHeatmap")
dat.growth <- read_fr(pa.growth); dat.growth[1:3, ]
# Paths of the two corresponsing aSVG files.
svg.arab1 <- system.file("extdata/shinyApp/example", 'arabidopsis.thaliana_organ_shm1.svg',
package="spatialHeatmap") 
svg.arab2 <- system.file("extdata/shinyApp/example", 'arabidopsis.thaliana_organ_shm2.svg',
package="spatialHeatmap") 
# Copy the two aSVG files to the same temporary directory.
file.copy(c(svg.arab1, svg.arab2), dir.svg, overwrite=TRUE)

# 4. Include aSVG templates of raster images.

pa.leaf <- system.file("extdata/shinyApp/example", 'dat_overlay.txt',
package="spatialHeatmap")
dat.leaf <- read_fr(pa.leaf); dat.leaf[1:2, ]
# Paths of the two aSVG files.
svg.leaf1 <- system.file("extdata/shinyApp/example", 'maize_leaf_shm1.svg',
package="spatialHeatmap")
svg.leaf2 <- system.file("extdata/shinyApp/example", 'maize_leaf_shm2.svg',
package="spatialHeatmap") 
# Paths of the two corresponsing raster images of templates.
tmp.leaf1 <- system.file("extdata/shinyApp/example", 'maize_leaf_shm1.png',
package="spatialHeatmap")
tmp.leaf2 <- system.file("extdata/shinyApp/example", 'maize_leaf_shm2.png',
package="spatialHeatmap") 
# Copy the two aSVG and two template files to the same temporary directory.
file.copy(c(svg.leaf1, svg.leaf2, tmp.leaf1, tmp.leaf2), dir.svg, overwrite=TRUE)

# Make the pairing table, which describes matchings between the data and image files.
df.pair <- data.frame(name=c('chicken', 'arab', 'growth', 'leaf'), data=c('expr_chicken', 'expr_arab', 
'random_data_multiple_aSVGs', 'leaf'), aSVG=c('gallus_gallus.svg', 'arabidopsis.thaliana_organ_shm.svg',
'arabidopsis.thaliana_organ_shm1.svg;arabidopsis.thaliana_organ_shm2.svg', 
'maize_leaf_shm1.svg;maize_leaf_shm1.png;maize_leaf_shm2.svg;maize_leaf_shm2.png'))
# Note that multiple aSVGs should be concatenated by comma, semicolon, or single space.
df.pair

# Organize the data and pairing table in a list, and create the database.
dat.lis <- list(df_pair=df.pair, expr_chicken=se.fil.chk, expr_arab=se.fil.arab, 
random_data_multiple_aSVGs=dat.growth, leaf=dat.leaf)
# Create the database in a temporary directory "db_shm".
dir.db <- paste0(tempdir(check=TRUE), '/db_shm') # Temporary directory. 
\donttest{ 
if (!dir.exists(dir.db)) dir.create(dir.db)
write_hdf5(dat.lis=dat.lis, dir=dir.db, svg.dir=dir.svg, replace=TRUE)

# 4. Read data and/or pairing table from "data_shm.tar".
dat.lis1 <- read_hdf5(paste0(dir.db, '/data_shm.tar'), names(dat.lis))
}

}
\references{
SummarizedExperiment: SummarizedExperiment container. R package version 1.10.1 \cr R Core Team (2018). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/
Hervé Pagès (2020). HDF5Array: HDF5 backend for DelayedArray objects. R package version 1.16.1.
}
\author{
Jianhai Zhang \email{jzhan067@ucr.edu} \cr Dr. Thomas Girke \email{thomas.girke@ucr.edu}
}
